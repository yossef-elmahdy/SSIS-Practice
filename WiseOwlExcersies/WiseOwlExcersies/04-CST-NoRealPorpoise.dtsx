<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/28/2023 7:42:33 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-E550ER8"
  DTS:CreatorName="WW930\a895416"
  DTS:DTSID="{794F830F-7692-4C8B-B769-2BC7B27FC936}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5035.3"
  DTS:LocaleID="1033"
  DTS:ObjectName="04-CST-NoRealPorpoise"
  DTS:PackageType="5"
  DTS:VersionBuild="12"
  DTS:VersionGUID="{D2667D8C-ABFA-4DC1-B1F9-01E3DD5A1670}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Flat File Connection Manager]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{8E397C99-FB2D-44E1-BDE7-47A8DCBE8A69}"
      DTS:ObjectName="Flat File Connection Manager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\a895416\Downloads\SSIS Excersises\Conditional Split Tranforms\E1\Whales with porpoises.txt">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Seen by"
              DTS:DTSID="{CFAF7199-1427-40C1-939D-85B6415DA9DE}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Date"
              DTS:DTSID="{A27D2DB9-50F8-4CB6-BBBB-58F4CC87A487}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Location"
              DTS:DTSID="{87755BFF-0BCC-4474-9CD2-73E997EED2B1}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="No"
              DTS:DTSID="{F2C304F3-9372-4F2E-8945-1E5826917DCD}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Species"
              DTS:DTSID="{2EA5D308-B3AC-41FF-8406-6903C51DDE07}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Time"
              DTS:DTSID="{E08B4642-4E35-4D29-91D7-1E6040E1F7EE}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E49C4A92-E970-4CD7-AA46-2EEC363278C5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="NumberHarbourPorpoises">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C505EAC2-92DB-400C-A0E0-9B2C431CF285}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="NumberOtherSightings">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Conditional and count the rows"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{1B3D4E6B-74AF-49CD-8A5C-022CBE4C0443}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Conditional and count the rows"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="Are Species Harbour Porpoise?"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Inputs[Conditional Split Input].Columns[Species]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Species"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Species]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Harbour porpoises]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Harbour porpoises"
                  synchronousInputId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">#{Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Species]} == "Harbour Porpoise"</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">Species == "Harbour Porpoise"</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Anything else]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Anything else"
                  synchronousInputId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Conditional and count the rows\Row Count"
              componentClassID="Microsoft.RowCount"
              contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
              name="Row Count">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable to hold the row count."
                  name="VariableName">User::NumberHarbourPorpoises</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Conditional and count the rows\Row Count.Inputs[Row Count Input 1]"
                  hasSideEffects="true"
                  name="Row Count Input 1">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Conditional and count the rows\Row Count.Outputs[Row Count Output 1]"
                  name="Row Count Output 1"
                  synchronousInputId="Package\Conditional and count the rows\Row Count.Inputs[Row Count Input 1]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Conditional and count the rows\Row Count 1"
              componentClassID="Microsoft.RowCount"
              contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
              name="Row Count 1">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable to hold the row count."
                  name="VariableName">User::NumberOtherSightings</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Conditional and count the rows\Row Count 1.Inputs[Row Count Input 1]"
                  hasSideEffects="true"
                  name="Row Count Input 1">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Conditional and count the rows\Row Count 1.Outputs[Row Count Output 1]"
                  name="Row Count Output 1"
                  synchronousInputId="Package\Conditional and count the rows\Row Count 1.Inputs[Row Count Input 1]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Conditional and count the rows\Union All"
              componentClassID="Microsoft.UnionAll"
              contactInfo="Union All;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Combines rows from multiple data flows without sorting. For example, add rows back to a data flow after correction of errors. If sorting is important, we recommend using the Merge transformation."
              name="Union All"
              version="1">
              <inputs>
                <input
                  refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1]"
                  name="Union All Input 1">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1].Columns[Seen by]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Seen by"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Seen by]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Seen by]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1].Columns[Date]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Date"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Date]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Date]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1].Columns[Location]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Location"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Location]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Location]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1].Columns[No]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="No"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[No]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[No]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1].Columns[Species]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Species"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Species]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Species]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1].Columns[Time]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Time"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Time]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Time]}</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
                <input
                  refId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 2]"
                  dangling="true"
                  hasSideEffects="true"
                  name="Union All Input 2">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1]"
                  name="Union All Output 1">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Seen by]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Seen by]"
                      name="Seen by" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Date]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Date]"
                      name="Date" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Location]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Location]"
                      name="Location" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[No]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[No]"
                      name="No" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Species]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Species]"
                      name="Species" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Time]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1].Columns[Time]"
                      name="Time" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Conditional and count the rows\Union All 1"
              componentClassID="Microsoft.UnionAll"
              contactInfo="Union All;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Combines rows from multiple data flows without sorting. For example, add rows back to a data flow after correction of errors. If sorting is important, we recommend using the Merge transformation."
              name="Union All 1"
              version="1">
              <inputs>
                <input
                  refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1]"
                  name="Union All Input 1">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1].Columns[Seen by]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Seen by"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Seen by]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Seen by]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1].Columns[Date]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Date"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Date]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Date]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1].Columns[Location]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Location"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Location]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Location]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1].Columns[No]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="No"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[No]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[No]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1].Columns[Species]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Species"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Species]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Species]}</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1].Columns[Time]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Time"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Time]">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Output column lineage ID"
                          name="OutputColumnLineageID">#{Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Time]}</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
                <input
                  refId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 2]"
                  dangling="true"
                  hasSideEffects="true"
                  name="Union All Input 2">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1]"
                  name="Union All Output 1">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Seen by]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Seen by]"
                      name="Seen by" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Date]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Date]"
                      name="Date" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Location]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Location]"
                      name="Location" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[No]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[No]"
                      name="No" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Species]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Species]"
                      name="Species" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Time]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1].Columns[Time]"
                      name="Time" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Conditional and count the rows\Whales TXT File"
              componentClassID="Microsoft.FlatFileSource"
              contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Source"
              localeId="1033"
              name="Whales TXT File"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether zero-length columns are treated as null."
                  name="RetainNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                  name="FileNameColumnName"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Conditional and count the rows\Whales TXT File.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[Flat File Connection Manager]"
                  connectionManagerRefId="Package.ConnectionManagers[Flat File Connection Manager]"
                  name="FlatFileConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output]"
                  name="Flat File Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Seen by]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Seen by]"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Seen by]"
                      name="Seen by"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Date]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Date]"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Date]"
                      name="Date"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Location]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Location]"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Location]"
                      name="Location"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[No]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[No]"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[No]"
                      name="No"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Species]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Species]"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Species]"
                      name="Species"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Time]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Time]"
                      length="50"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].Columns[Time]"
                      name="Time"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Seen by]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="Seen by" />
                    <externalMetadataColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Date]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="Date" />
                    <externalMetadataColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Location]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="Location" />
                    <externalMetadataColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[No]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="No" />
                    <externalMetadataColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Species]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="Species" />
                    <externalMetadataColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output].ExternalColumns[Time]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="Time" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Error Output]"
                  isErrorOut="true"
                  name="Flat File Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      codePage="1252"
                      dataType="text"
                      description="Flat File Source Error Output Column"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      name="Flat File Source Error Output Column" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Conditional and count the rows.Paths[Anything else]"
              endId="Package\Conditional and count the rows\Union All 1.Inputs[Union All Input 1]"
              name="Anything else"
              startId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Anything else]" />
            <path
              refId="Package\Conditional and count the rows.Paths[Flat File Source Output]"
              endId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Inputs[Conditional Split Input]"
              name="Flat File Source Output"
              startId="Package\Conditional and count the rows\Whales TXT File.Outputs[Flat File Source Output]" />
            <path
              refId="Package\Conditional and count the rows.Paths[Harbour porpoises]"
              endId="Package\Conditional and count the rows\Union All.Inputs[Union All Input 1]"
              name="Harbour porpoises"
              startId="Package\Conditional and count the rows\Are Species Harbour Porpoise?.Outputs[Harbour porpoises]" />
            <path
              refId="Package\Conditional and count the rows.Paths[Union All Output 1]"
              endId="Package\Conditional and count the rows\Row Count.Inputs[Row Count Input 1]"
              name="Union All Output 1"
              startId="Package\Conditional and count the rows\Union All.Outputs[Union All Output 1]" />
            <path
              refId="Package\Conditional and count the rows.Paths[Union All Output 11]"
              endId="Package\Conditional and count the rows\Row Count 1.Inputs[Row Count Input 1]"
              name="Union All Output 1"
              startId="Package\Conditional and count the rows\Union All 1.Outputs[Union All Output 1]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Show how many rows"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{D319A4A6-AD2E-4C23-B6E1-091FFAA201A2}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Show how many rows"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_e9f7041549414ca09be0c4acec297fff"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::NumberHarbourPorpoises,User::NumberOtherSightings">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_e9f7041549414ca09be0c4acec297fff.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{11b8922a-dda5-4df2-bf4e-f61088ed56e1}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_e9f7041549414ca09be0c4acec297fff</RootNamespace>
    <AssemblyName>ST_e9f7041549414ca09be0c4acec297fff</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e9f7041549414ca09be0c4acec297fff.Properties.Settings.get_Default():ST_e9f7041549414ca09be0c4acec297fff.Properties.Sett" +
    "ings")]

namespace ST_e9f7041549414ca09be0c4acec297fff.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_e9f7041549414ca09be0c4acec297fff
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            int HarbourCount = Convert.ToInt32(Dts.Variables["NumberHarbourPorpoises"].Value);
            int AnythingCount = Convert.ToInt32(Dts.Variables["NumberOtherSightings"].Value);

            MessageBox.Show("Number of harbour porpoises seen: " + HarbourCount.ToString()
                + "\nNumber of sightings of other animals: " + AnythingCount.ToString());

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>ST_e9f7041549414ca09be0c4acec297fff</msb:CodeName>
    <msb:DisplayName>ST_e9f7041549414ca09be0c4acec297fff</msb:DisplayName>
    <msb:ProjectId>{06134484-30B9-411A-A705-560ACD1C4188}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_e9f7041549414ca09be0c4acec297fff.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_e9f7041549414ca09be0c4acec297fff")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_e9f7041549414ca09be0c4acec297fff")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e9f7041549414ca09be0c4acec297fff.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e9f7041549414ca09be0c4acec297fff.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e9f7041549414ca09be0c4acec297fff.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_e9f7041549414ca09be0c4acec297fff.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_e9f7041549414ca09be0c4acec297fff.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_e9f7041549414ca09be0c4acec297fff.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDACJh1WMAAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAQi8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPAuAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAASA8AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAk
LwAAAAAAAEgAAAACAAUANCEAAAQNAAABAAAAAAAAADguAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBABwAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKKBQAAAoKAigQAAAKbxEAAApyLwAAcG8SAAAKbxMAAAooFAAACgtyWQAAcBIAKBUAAApynwAA
cBIBKBUAAAooFgAACigXAAAKJgIoEAAAChZvGAAACioeAigZAAAKKh4CKBoAAAoqrn4BAAAELR5y
7wAAcNADAAACKBsAAApvHAAACnMdAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQq
HgIoHgAACioucwgAAAaAAwAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAA
AAAEAAAjfgAAbAQAAKQFAAAjU3RyaW5ncwAAAAAQCgAAZAEAACNVUwB0CwAAEAAAACNHVUlEAAAA
hAsAAIABAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAiAAAABQAAAAYAAAAJ
AAAAAQAAAB4AAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAAB9AwEA
AAAAAAYACQJNBAYAmAJNBAYAVQE6BA8AwQQAAAYAggH7AwYA7AH7AwYAzQH7AwYAfwL7AwYAKQL7
AwYAQgL7AwYAmQH7AwYAtAHqAgoAXQIsAwoA1AAsAwYAtQOuAwYAOAE6BAYAUAWuAwYAHQRtBAYA
DQTmAw4ACAFnAw4AaQFnAw4A8ADRAwYAHQFNBAoAVQMsAxIAAwV/ABIAUgB/AAYAfwWuAwYAAwCu
AwYABgOuAxYAjAUWBRYAYwUWBQYAnwCuAwYAWwCuAwYAmwX7AwAAAAAJAAAAAAABAAEAAQAQAMYD
xgI5AAEAAQAAABAAdATQBEUAAQADAAABEAANBdAEWQADAAcAAwEAADsFAAA9AAQACgARALoDfgAR
AMQAggARAEIAhgAGBjEAigBWgCsFjQBWgKQAjQBQIAAAAACGAMwDBgABAMwgAAAAAIYYLQQGAAEA
1CAAAAAAgxgtBAYAAQDcIAAAAACTCBkEkQABAAghAAAAAJMIrACWAAEADyEAAAAAkwi4AJsAAQAX
IQAAAACWCFcFoQACAB4hAAAAAIYYLQQGAAIAJiEAAAAAkRgzBKYAAgAAAAEAwAIJAC0EAQARAC0E
BgAZAC0ECgApAC0EEAAxAC0EEAA5AC0EEABBAC0EEABJAC0EEABRAC0EEABZAC0EEABhAC0EEABp
AC0EBgCBAC0EBgCpAC0EFQC5AC0EBgBxADMFIADBAP8EJQDJAKUDKgDRALYCMADZAAEANADhAAQD
OQDpAEkFPQDxAIcFRQDBAHAFAQBxAC0EBgCJAC0EBgABAW0ASwABAZcFVACRAC0EWgCxAC0EBgAI
ABQAdAAIABgAeQApAHMA4QAuAAsAuQAuABMAwgAuABsA4QAuACMA6gAuACsAEwEuADMAEwEuADsA
EwEuAEMA6gAuAEsAGQEuAFMAEwEuAFsAMAFDAGMAeQBJAHMA4QBhAHsAeQBjAGsAeQAbAAMAAQAE
AAMAAAAdBKoAAADMAK8AAABbBbQAAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAADsIOCL
AAAAAAAAxgIAAAQAAAAAAAAAAAAAAGIAOQAAAAAAEAAAAAAAAAAAAAAAawANAwAAAAAEAAAAAAAA
AAAAAABiAK4DAAAAABAAAAAAAAAAAAAAAGsAEgAAAAAABAAAAAAAAAAAAAAAYgAWBQAAAAAAAAAA
AQAAAH4EAAAFAAIAAAAAVG9JbnQzMgA8TW9kdWxlPgBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFn
ZWREVFMAdmFsdWVfXwBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UAVmFyaWFibGUAUnVudGltZVR5
cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGlt
ZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZT
VEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JC
cm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJD
b2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRl
AEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0
RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAFNUX2U5ZjcwNDE1NDk0MTRj
YTA5YmUwYzRhY2VjMjk3ZmZmAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcATWlj
cm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tz
LlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2U5
ZjcwNDE1NDk0MTRjYTA5YmUwYzRhY2VjMjk3ZmZmLmRsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQBy
ZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxp
emF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEN1bHR1cmVJbmZvAGdldF9SZXNvdXJjZU1hbmFnZXIA
LmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfZTlmNzA0MTU0OTQxNGNhMDliZTBjNGFjZWMyOTdm
ZmYuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2U5Zjcw
NDE1NDk0MTRjYTA5YmUwYzRhY2VjMjk3ZmZmLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBTZXR0
aW5ncwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBD
b25jYXQAT2JqZWN0AGdldF9EZWZhdWx0AERpYWxvZ1Jlc3VsdABzZXRfVGFza1Jlc3VsdABDb252
ZXJ0AFNob3cATWVzc2FnZUJveABnZXRfQXNzZW1ibHkAAC1OAHUAbQBiAGUAcgBIAGEAcgBiAG8A
dQByAFAAbwByAHAAbwBpAHMAZQBzAAApTgB1AG0AYgBlAHIATwB0AGgAZQByAFMAaQBnAGgAdABp
AG4AZwBzAABFTgB1AG0AYgBlAHIAIABvAGYAIABoAGEAcgBiAG8AdQByACAAcABvAHIAcABvAGkA
cwBlAHMAIABzAGUAZQBuADoAIAAATwoATgB1AG0AYgBlAHIAIABvAGYAIABzAGkAZwBoAHQAaQBu
AGcAcwAgAG8AZgAgAG8AdABoAGUAcgAgAGEAbgBpAG0AYQBsAHMAOgAgAABxUwBUAF8AZQA5AGYA
NwAwADQAMQA1ADQAOQA0ADEANABjAGEAMAA5AGIAZQAwAGMANABhAGMAZQBjADIAOQA3AGYAZgBm
AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAABrNLm9fauMQ4TU
QQ3Iv2OLAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFRBAcCCAgEIAASYQQgABJlBSABEmkcAyAA
HAQAAQgcAyAADgcABA4ODg4OBQABEX0OCAABEoCBEYCFBSAAEoCJByACAQ4SgIkIt3pcVhk04IkI
iYRdzYCAzJEEAAAAAAQBAAAAAwYSSQMGEk0DBhIQAgYIAwYRFAQAABJJBAAAEk0FAAEBEk0EAAAS
EAMAAAEECAASSQQIABJNBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJv
d3MBCAEAAgAAAAAAKAEAI1NUX2U5ZjcwNDE1NDk0MTRjYTA5YmUwYzRhY2VjMjk3ZmZmAAAFAQAA
AAAWAQARQ29weXJpZ2h0IEAgIDIwMjMAAE0BABwuTkVURnJhbWV3b3JrLFZlcnNpb249djQuNy4y
AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRQuTkVUIEZyYW1ld29yayA0LjcuMgAAtAAAAM7K774B
AAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lv
bj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUw
ODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQ
tAAAABgvAAAAAAAAAAAAADIvAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkLwAAAAAAAAAAAAAA
AF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQDgi+wgAAABAOCL7CA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfAGUAOQBmADcAMAA0ADEANQA0ADkANAAxADQAYwBhADAAOQBiAGUAMABjADQAYQBj
AGUAYwAyADkANwBmAGYAZgAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA4ADQAMgA4AC4AMwA1ADgAMAA4AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfAGUAOQBmADcAMAA0ADEANQA0ADkANAAxADQAYwBhADAAOQBiAGUAMABjADQAYQBjAGUA
YwAyADkANwBmAGYAZgAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAzAAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AZQA5AGYANwAwADQAMQA1ADQAOQA0ADEANABjAGEAMAA5AGIAZQAwAGMA
NABhAGMAZQBjADIAOQA3AGYAZgBmAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfAGUAOQBmADcAMAA0ADEANQA0ADkANAAxADQAYwBhADAAOQBiAGUAMABjADQA
YQBjAGUAYwAyADkANwBmAGYAZgAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4AOAA0ADIAOAAuADMANQA4ADAAOAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAA0ADIAOAAuADMANQA4ADAAOAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAABEPwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{870F7AC8-1CA2-4E12-9F07-42F81B351131}"
      DTS:From="Package\Conditional and count the rows"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Show how many rows" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="220.8,41.6"
          Id="Package\Conditional and count the rows"
          TopLeft="368.333313208488,87.5333327246374" />
        <NodeLayout
          Size="179.2,41.6"
          Id="Package\Show how many rows"
          TopLeft="385.83331225233,201.066665268475" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="477.083312730409,129.133332724637">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,71.9333325438373"
              Start="0,0"
              End="0,64.4333325438373">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,64.4333325438373" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Conditional and count the rows">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="155.2,41.6"
          Id="Package\Conditional and count the rows\Whales TXT File"
          TopLeft="390.833311979142,58.9333329235182" />
        <NodeLayout
          Size="129.6,41.6"
          Id="Package\Conditional and count the rows\Row Count"
          TopLeft="266.666652096643,361.399997486869" />
        <NodeLayout
          Size="128.8,41.6"
          Id="Package\Conditional and count the rows\Union All 1"
          TopLeft="533.333304193286,282.533331368632" />
        <NodeLayout
          Size="120,41.6"
          Id="Package\Conditional and count the rows\Union All"
          TopLeft="271.666651823455,278.199998065432" />
        <NodeLayout
          Size="224,41.6"
          Id="Package\Conditional and count the rows\Are Species Harbour Porpoise?"
          TopLeft="361.666646906072,156.866665575835" />
        <NodeLayout
          Size="138.4,41.6"
          Id="Package\Conditional and count the rows\Row Count 1"
          TopLeft="527.499971178672,360.866664563351" />
        <EdgeLayout
          Id="Package\Conditional and count the rows.Paths[Harbour porpoises]"
          TopLeft="437.666646906072,198.466665575835">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-105.999995082617,79.733332489597"
              Start="0,0"
              End="-105.999995082617,72.233332489597">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.2326237723903" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28.2326237723903"
                    Point2="0,32.2326237723903"
                    Point3="-4,32.2326237723903" />
                  <mssgle:LineSegment
                    End="-101.999995082617,32.2326237723903" />
                  <mssgle:CubicBezierSegment
                    Point1="-101.999995082617,32.2326237723903"
                    Point2="-105.999995082617,32.2326237723903"
                    Point3="-105.999995082617,36.2326237723903" />
                  <mssgle:LineSegment
                    End="-105.999995082617,72.233332489597" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-102.836228010059,37.2326237723903,99.6724609375,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Conditional and count the rows.Paths[Flat File Source Output]"
          TopLeft="471.049979442607,100.533332923518">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,56.3333326523168"
              Start="0,0"
              End="0,48.8333326523168">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,48.8333326523168" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Conditional and count the rows.Paths[Anything else]"
          TopLeft="509.666646906072,198.466665575835">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="88.066657287214,84.066665792797"
              Start="0,0"
              End="88.066657287214,76.566665792797">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.9843968098541" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.9843968098541"
                    Point2="0,33.9843968098541"
                    Point3="4,33.9843968098541" />
                  <mssgle:LineSegment
                    End="84.066657287214,33.9843968098541" />
                  <mssgle:CubicBezierSegment
                    Point1="84.066657287214,33.9843968098541"
                    Point2="88.066657287214,33.9843968098541"
                    Point3="88.066657287214,37.9843968098541" />
                  <mssgle:LineSegment
                    End="88.066657287214,76.566665792797" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="5.023328643607,38.9843968098541,78.02,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Conditional and count the rows.Paths[Union All Output 11]"
          TopLeft="597.216637685979,324.133331368632">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36.7333331947193"
              Start="0,0"
              End="0,29.2333331947193">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.2333331947193" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Conditional and count the rows.Paths[Union All Output 1]"
          TopLeft="331.566651960049,319.799998065432">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,41.5999994214376"
              Start="0,0"
              End="0,34.0999994214376">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34.0999994214376" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>